{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DomUtils = exports.parseFeed = exports.getFeed = exports.ElementType = exports.Tokenizer = exports.createDomStream = exports.parseDOM = exports.parseDocument = exports.DefaultHandler = exports.DomHandler = exports.Parser = void 0;\n\nvar Parser_js_1 = require(\"./Parser.js\");\n\nvar Parser_js_2 = require(\"./Parser.js\");\n\nObject.defineProperty(exports, \"Parser\", {\n  enumerable: true,\n  get: function () {\n    return Parser_js_2.Parser;\n  }\n});\n\nvar domhandler_1 = require(\"domhandler\");\n\nvar domhandler_2 = require(\"domhandler\");\n\nObject.defineProperty(exports, \"DomHandler\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_2.DomHandler;\n  }\n}); // Old name for DomHandler\n\nObject.defineProperty(exports, \"DefaultHandler\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_2.DomHandler;\n  }\n}); // Helper methods\n\n/**\n * Parses the data, returns the resulting document.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n */\n\nfunction parseDocument(data, options) {\n  var handler = new domhandler_1.DomHandler(undefined, options);\n  new Parser_js_1.Parser(handler, options).end(data);\n  return handler.root;\n}\n\nexports.parseDocument = parseDocument;\n/**\n * Parses data, returns an array of the root nodes.\n *\n * Note that the root nodes still have a `Document` node as their parent.\n * Use `parseDocument` to get the `Document` node instead.\n *\n * @param data The data that should be parsed.\n * @param options Optional options for the parser and DOM builder.\n * @deprecated Use `parseDocument` instead.\n */\n\nfunction parseDOM(data, options) {\n  return parseDocument(data, options).children;\n}\n\nexports.parseDOM = parseDOM;\n/**\n * Creates a parser instance, with an attached DOM handler.\n *\n * @param callback A callback that will be called once parsing has been completed.\n * @param options Optional options for the parser and DOM builder.\n * @param elementCallback An optional callback that will be called every time a tag has been completed inside of the DOM.\n */\n\nfunction createDomStream(callback, options, elementCallback) {\n  var handler = new domhandler_1.DomHandler(callback, options, elementCallback);\n  return new Parser_js_1.Parser(handler, options);\n}\n\nexports.createDomStream = createDomStream;\n\nvar Tokenizer_js_1 = require(\"./Tokenizer.js\");\n\nObject.defineProperty(exports, \"Tokenizer\", {\n  enumerable: true,\n  get: function () {\n    return __importDefault(Tokenizer_js_1).default;\n  }\n});\n/*\n * All of the following exports exist for backwards-compatibility.\n * They should probably be removed eventually.\n */\n\nexports.ElementType = __importStar(require(\"domelementtype\"));\n\nvar domutils_1 = require(\"domutils\");\n\nvar domutils_2 = require(\"domutils\");\n\nObject.defineProperty(exports, \"getFeed\", {\n  enumerable: true,\n  get: function () {\n    return domutils_2.getFeed;\n  }\n});\nvar parseFeedDefaultOptions = {\n  xmlMode: true\n};\n/**\n * Parse a feed.\n *\n * @param feed The feed that should be parsed, as a string.\n * @param options Optionally, options for parsing. When using this, you should set `xmlMode` to `true`.\n */\n\nfunction parseFeed(feed, options) {\n  if (options === void 0) {\n    options = parseFeedDefaultOptions;\n  }\n\n  return (0, domutils_1.getFeed)(parseDOM(feed, options));\n}\n\nexports.parseFeed = parseFeed;\nexports.DomUtils = __importStar(require(\"domutils\"));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAASA;EAAAC;EAAAC;IAAA;EAAM;AAAN;;AAET;;AAQA;;AACIF;EAAAC;EAAAC;IAAA;EAAU;AAAV,G,CACA;;AACAF;EAAAC;EAAAC;IAAA;EAAU;AAAV,G,CAMJ;;AAEA;;;;;;;AAMA,SAAgBC,aAAhB,CAA8BC,IAA9B,EAA4CC,OAA5C,EAA6D;EACzD,IAAMC,OAAO,GAAG,IAAIC,uBAAJ,CAAeC,SAAf,EAA0BH,OAA1B,CAAhB;EACA,IAAII,kBAAJ,CAAWH,OAAX,EAAoBD,OAApB,EAA6BK,GAA7B,CAAiCN,IAAjC;EACA,OAAOE,OAAO,CAACK,IAAf;AACH;;AAJDC;AAKA;;;;;;;;;;;AAUA,SAAgBC,QAAhB,CAAyBT,IAAzB,EAAuCC,OAAvC,EAAwD;EACpD,OAAOF,aAAa,CAACC,IAAD,EAAOC,OAAP,CAAb,CAA6BS,QAApC;AACH;;AAFDF;AAGA;;;;;;;;AAOA,SAAgBG,eAAhB,CACIC,QADJ,EAEIX,OAFJ,EAGIY,eAHJ,EAGgD;EAE5C,IAAMX,OAAO,GAAG,IAAIC,uBAAJ,CAAeS,QAAf,EAAyBX,OAAzB,EAAkCY,eAAlC,CAAhB;EACA,OAAO,IAAIR,kBAAJ,CAAWH,OAAX,EAAoBD,OAApB,CAAP;AACH;;AAPDO;;AASA;;AACIZ;EAAAC;EAAAC;IAAA;EAAO;AAAP;AAIJ;;;;;AAIAU;;AAEA;;AAEA;;AAASZ;EAAAC;EAAAC;IAAA;EAAO;AAAP;AAET,IAAMgB,uBAAuB,GAAG;EAAEC,OAAO,EAAE;AAAX,CAAhC;AAEA;;;;;;;AAMA,SAAgBC,SAAhB,CACIC,IADJ,EAEIhB,OAFJ,EAE8C;EAA1C;IAAAA;EAA0C;;EAE1C,OAAO,wBAAQQ,QAAQ,CAACQ,IAAD,EAAOhB,OAAP,CAAhB,CAAP;AACH;;AALDO;AAOAA","names":["Object","enumerable","get","parseDocument","data","options","handler","domhandler_1","undefined","Parser_js_1","end","root","exports","parseDOM","children","createDomStream","callback","elementCallback","parseFeedDefaultOptions","xmlMode","parseFeed","feed"],"sources":["index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}