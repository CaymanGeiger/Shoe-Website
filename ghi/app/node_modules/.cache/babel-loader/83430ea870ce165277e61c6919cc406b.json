{"ast":null,"code":"var _jsxFileName = \"/app/src/Auth/AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n\n  return useContext(AuthContext);\n};\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const AuthProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const login = () => setIsAuthenticated(true);\n\n  const logout = () => setIsAuthenticated(false);\n\n  const [csrfToken, setCsrfToken] = useState('');\n  const value = {\n    isAuthenticated,\n    login,\n    logout\n  };\n  useEffect(() => {\n    const fetchCsrfToken = async () => {\n      try {\n        const response = await fetch('http://localhost:8070/api/csrf-token/', {\n          method: 'GET',\n          'X-CSRFToken': csrfToken,\n          credentials: 'include'\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          setCsrfToken(data.csrfToken);\n        } else {\n          console.error('Failed to fetch CSRF token.');\n        }\n      } catch (error) {\n        console.error('Error fetching CSRF token:', error);\n      }\n    };\n\n    fetchCsrfToken();\n  }, []);\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const response = await fetch('http://localhost:8070/api/check-auth-status', {\n          method: 'GET',\n          credentials: 'include'\n        });\n        const data = await response.json();\n        setIsAuthenticated(data.isAuthenticated);\n      } catch (error) {\n        console.error('Failed to check auth status:', error);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 13\n  }, this);\n};\n\n_s2(AuthProvider, \"hGMKeh7UE6uQy6AB4N+W4sQu4+E=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AuthContext","useAuth","AuthProvider","children","isAuthenticated","setIsAuthenticated","login","logout","csrfToken","setCsrfToken","value","fetchCsrfToken","response","fetch","method","credentials","ok","data","json","console","error","checkAuthStatus"],"sources":["/app/src/Auth/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\n    const AuthContext = createContext();\n\n    export const useAuth = () => {\n        return useContext(AuthContext);\n    };\n\n    export const AuthProvider = ({ children }) => {\n        const [isAuthenticated, setIsAuthenticated] = useState(false);\n        const login = () => setIsAuthenticated(true);\n        const logout = () => setIsAuthenticated(false);\n        const [csrfToken, setCsrfToken] = useState('');\n        const value = {\n            isAuthenticated,\n            login,\n            logout,\n        };\n\n    useEffect(() => {\n        const fetchCsrfToken = async () => {\n        try {\n            const response = await fetch('http://localhost:8070/api/csrf-token/', {\n                method: 'GET',\n                'X-CSRFToken': csrfToken,\n                credentials: 'include',\n            });\n        if (response.ok) {\n            const data = await response.json();\n            setCsrfToken(data.csrfToken);\n        } else {\n            console.error('Failed to fetch CSRF token.');\n        }\n        } catch (error) {\n            console.error('Error fetching CSRF token:', error);\n        }\n        };\n\n        fetchCsrfToken();\n    }, []);\n\n    useEffect(() => {\n        const checkAuthStatus = async () => {\n            try {\n                const response = await fetch('http://localhost:8070/api/check-auth-status', {\n                    method: 'GET',\n                    credentials: 'include',\n                });\n                const data = await response.json();\n                setIsAuthenticated(data.isAuthenticated);\n            } catch (error) {\n                console.error('Failed to check auth status:', error);\n            }\n        };\n\n        checkAuthStatus();\n    }, []);\n        return (\n            <AuthContext.Provider value={value}>\n                {children}\n            </AuthContext.Provider>\n        );\n    };\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,EAAqDC,SAArD,QAAsE,OAAtE;;AAEI,MAAMC,WAAW,gBAAGJ,aAAa,EAAjC;AAEA,OAAO,MAAMK,OAAO,GAAG,MAAM;EAAA;;EACzB,OAAOJ,UAAU,CAACG,WAAD,CAAjB;AACH,CAFM;;GAAMC,O;;AAIb,OAAO,MAAMC,YAAY,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC1C,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,CAAC,KAAD,CAAtD;;EACA,MAAMQ,KAAK,GAAG,MAAMD,kBAAkB,CAAC,IAAD,CAAtC;;EACA,MAAME,MAAM,GAAG,MAAMF,kBAAkB,CAAC,KAAD,CAAvC;;EACA,MAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;EACA,MAAMY,KAAK,GAAG;IACVN,eADU;IAEVE,KAFU;IAGVC;EAHU,CAAd;EAMJR,SAAS,CAAC,MAAM;IACZ,MAAMY,cAAc,GAAG,YAAY;MACnC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAD,EAA0C;UAClEC,MAAM,EAAE,KAD0D;UAElE,eAAeN,SAFmD;UAGlEO,WAAW,EAAE;QAHqD,CAA1C,CAA5B;;QAKJ,IAAIH,QAAQ,CAACI,EAAb,EAAiB;UACb,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;UACAT,YAAY,CAACQ,IAAI,CAACT,SAAN,CAAZ;QACH,CAHD,MAGO;UACHW,OAAO,CAACC,KAAR,CAAc,6BAAd;QACH;MACA,CAZD,CAYE,OAAOA,KAAP,EAAc;QACZD,OAAO,CAACC,KAAR,CAAc,4BAAd,EAA4CA,KAA5C;MACH;IACA,CAhBD;;IAkBAT,cAAc;EACjB,CApBQ,EAoBN,EApBM,CAAT;EAsBAZ,SAAS,CAAC,MAAM;IACZ,MAAMsB,eAAe,GAAG,YAAY;MAChC,IAAI;QACA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAAD,EAAgD;UACxEC,MAAM,EAAE,KADgE;UAExEC,WAAW,EAAE;QAF2D,CAAhD,CAA5B;QAIA,MAAME,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;QACAb,kBAAkB,CAACY,IAAI,CAACb,eAAN,CAAlB;MACH,CAPD,CAOE,OAAOgB,KAAP,EAAc;QACZD,OAAO,CAACC,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;MACH;IACJ,CAXD;;IAaAC,eAAe;EAClB,CAfQ,EAeN,EAfM,CAAT;EAgBI,oBACI,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEX,KAA7B;IAAA,UACKP;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CAtDM;;IAAMD,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}