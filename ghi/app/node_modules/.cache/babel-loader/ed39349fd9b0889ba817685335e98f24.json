{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;\n\nvar domhandler_1 = require(\"domhandler\");\n/**\n * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\n\n\nfunction filter(test, node, recurse, limit) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n\n  if (limit === void 0) {\n    limit = Infinity;\n  }\n\n  return find(test, Array.isArray(node) ? node : [node], recurse, limit);\n}\n\nexports.filter = filter;\n/**\n * Search an array of nodes and their children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\n\nfunction find(test, nodes, recurse, limit) {\n  var result = [];\n  /** Stack of the arrays we are looking at. */\n\n  var nodeStack = [nodes];\n  /** Stack of the indices within the arrays. */\n\n  var indexStack = [0];\n\n  for (;;) {\n    // First, check if the current array has any more elements to look at.\n    if (indexStack[0] >= nodeStack[0].length) {\n      // If we have no more arrays to look at, we are done.\n      if (indexStack.length === 1) {\n        return result;\n      } // Otherwise, remove the current array from the stack.\n\n\n      nodeStack.shift();\n      indexStack.shift(); // Loop back to the start to continue with the next array.\n\n      continue;\n    }\n\n    var elem = nodeStack[0][indexStack[0]++];\n\n    if (test(elem)) {\n      result.push(elem);\n      if (--limit <= 0) return result;\n    }\n\n    if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {\n      /*\n       * Add the children to the stack. We are depth-first, so this is\n       * the next array we look at.\n       */\n      indexStack.unshift(0);\n      nodeStack.unshift(elem.children);\n    }\n  }\n}\n\nexports.find = find;\n/**\n * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n * @deprecated Use `Array.prototype.find` directly.\n */\n\nfunction findOneChild(test, nodes) {\n  return nodes.find(test);\n}\n\nexports.findOneChild = findOneChild;\n/**\n * Finds one element in a tree that passes a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Node or array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first node that passes `test`.\n */\n\nfunction findOne(test, nodes, recurse) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n\n  var elem = null;\n\n  for (var i = 0; i < nodes.length && !elem; i++) {\n    var node = nodes[i];\n\n    if (!(0, domhandler_1.isTag)(node)) {\n      continue;\n    } else if (test(node)) {\n      elem = node;\n    } else if (recurse && node.children.length > 0) {\n      elem = findOne(test, node.children, true);\n    }\n  }\n\n  return elem;\n}\n\nexports.findOne = findOne;\n/**\n * Checks if a tree of nodes contains at least one node passing a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing the test.\n */\n\nfunction existsOne(test, nodes) {\n  return nodes.some(function (checked) {\n    return (0, domhandler_1.isTag)(checked) && (test(checked) || existsOne(test, checked.children));\n  });\n}\n\nexports.existsOne = existsOne;\n/**\n * Search an array of nodes and their children for elements passing a test function.\n *\n * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\n\nfunction findAll(test, nodes) {\n  var result = [];\n  var nodeStack = [nodes];\n  var indexStack = [0];\n\n  for (;;) {\n    if (indexStack[0] >= nodeStack[0].length) {\n      if (nodeStack.length === 1) {\n        return result;\n      } // Otherwise, remove the current array from the stack.\n\n\n      nodeStack.shift();\n      indexStack.shift(); // Loop back to the start to continue with the next array.\n\n      continue;\n    }\n\n    var elem = nodeStack[0][indexStack[0]++];\n    if (!(0, domhandler_1.isTag)(elem)) continue;\n    if (test(elem)) result.push(elem);\n\n    if (elem.children.length > 0) {\n      indexStack.unshift(0);\n      nodeStack.unshift(elem.children);\n    }\n  }\n}\n\nexports.findAll = findAll;","map":{"version":3,"mappings":"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","names":["filter","test","node","recurse","limit","find","Array","isArray","exports","nodes","result","nodeStack","indexStack","length","shift","elem","push","children","unshift","findOneChild","findOne","i","existsOne","some","checked","findAll"],"sources":["querying.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}