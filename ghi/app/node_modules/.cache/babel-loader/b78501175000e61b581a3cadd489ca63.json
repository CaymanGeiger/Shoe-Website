{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTMLAttribute = exports.decodeHTML = exports.determineBranch = exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\n\nvar decode_data_html_js_1 = __importDefault(require(\"./generated/decode-data-html.js\"));\n\nexports.htmlDecodeTree = decode_data_html_js_1.default;\n\nvar decode_data_xml_js_1 = __importDefault(require(\"./generated/decode-data-xml.js\"));\n\nexports.xmlDecodeTree = decode_data_xml_js_1.default;\n\nvar decode_codepoint_js_1 = __importStar(require(\"./decode_codepoint.js\"));\n\nexports.decodeCodePoint = decode_codepoint_js_1.default;\n\nvar decode_codepoint_js_2 = require(\"./decode_codepoint.js\");\n\nObject.defineProperty(exports, \"replaceCodePoint\", {\n  enumerable: true,\n  get: function () {\n    return decode_codepoint_js_2.replaceCodePoint;\n  }\n});\nObject.defineProperty(exports, \"fromCodePoint\", {\n  enumerable: true,\n  get: function () {\n    return decode_codepoint_js_2.fromCodePoint;\n  }\n});\nvar CharCodes;\n\n(function (CharCodes) {\n  CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n  CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n  CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n  CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n  CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n  CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n  CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n  CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n  CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n  CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n  CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n  CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */\n\n\nvar TO_LOWER_BIT = 32;\nvar BinTrieFlags;\n\n(function (BinTrieFlags) {\n  BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\n\nfunction isNumber(code) {\n  return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\n\nfunction isHexadecimalCharacter(code) {\n  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;\n}\n\nfunction isAsciiAlphaNumeric(code) {\n  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */\n\n\nfunction isEntityInAttributeInvalidEnd(code) {\n  return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\n\nvar EntityDecoderState;\n\n(function (EntityDecoderState) {\n  EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n  EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n  EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n  EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n  EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\n\nvar DecodingMode;\n\n(function (DecodingMode) {\n  /** Entities in text nodes that can end with any character. */\n  DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n  /** Only allow entities terminated with a semicolon. */\n\n  DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n  /** Entities in attributes have limitations on ending characters. */\n\n  DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode = exports.DecodingMode || (exports.DecodingMode = {}));\n/**\n * Token decoder with support of writing partial entities.\n */\n\n\nvar EntityDecoder =\n/** @class */\nfunction () {\n  function EntityDecoder(\n  /** The tree used to decode entities. */\n  decodeTree,\n  /**\n   * The function that is called when a codepoint is decoded.\n   *\n   * For multi-byte named entities, this will be called multiple times,\n   * with the second codepoint, and the same `consumed` value.\n   *\n   * @param codepoint The decoded codepoint.\n   * @param consumed The number of bytes consumed by the decoder.\n   */\n  emitCodePoint,\n  /** An object that is used to produce errors. */\n  errors) {\n    this.decodeTree = decodeTree;\n    this.emitCodePoint = emitCodePoint;\n    this.errors = errors;\n    /** The current state of the decoder. */\n\n    this.state = EntityDecoderState.EntityStart;\n    /** Characters that were consumed while parsing an entity. */\n\n    this.consumed = 1;\n    /**\n     * The result of the entity.\n     *\n     * Either the result index of a numeric entity, or the codepoint of a\n     * numeric entity.\n     */\n\n    this.result = 0;\n    /** The current index in the decode tree. */\n\n    this.treeIndex = 0;\n    /** The number of characters that were consumed in excess. */\n\n    this.excess = 1;\n    /** The mode in which the decoder is operating. */\n\n    this.decodeMode = DecodingMode.Strict;\n  }\n  /** Resets the instance to make it reusable. */\n\n\n  EntityDecoder.prototype.startEntity = function (decodeMode) {\n    this.decodeMode = decodeMode;\n    this.state = EntityDecoderState.EntityStart;\n    this.result = 0;\n    this.treeIndex = 0;\n    this.excess = 1;\n    this.consumed = 1;\n  };\n  /**\n   * Write an entity to the decoder. This can be called multiple times with partial entities.\n   * If the entity is incomplete, the decoder will return -1.\n   *\n   * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n   * entity is incomplete, and resume when the next string is written.\n   *\n   * @param string The string containing the entity (or a continuation of the entity).\n   * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n\n\n  EntityDecoder.prototype.write = function (str, offset) {\n    switch (this.state) {\n      case EntityDecoderState.EntityStart:\n        {\n          if (str.charCodeAt(offset) === CharCodes.NUM) {\n            this.state = EntityDecoderState.NumericStart;\n            this.consumed += 1;\n            return this.stateNumericStart(str, offset + 1);\n          }\n\n          this.state = EntityDecoderState.NamedEntity;\n          return this.stateNamedEntity(str, offset);\n        }\n\n      case EntityDecoderState.NumericStart:\n        {\n          return this.stateNumericStart(str, offset);\n        }\n\n      case EntityDecoderState.NumericDecimal:\n        {\n          return this.stateNumericDecimal(str, offset);\n        }\n\n      case EntityDecoderState.NumericHex:\n        {\n          return this.stateNumericHex(str, offset);\n        }\n\n      case EntityDecoderState.NamedEntity:\n        {\n          return this.stateNamedEntity(str, offset);\n        }\n    }\n  };\n  /**\n   * Switches between the numeric decimal and hexadecimal states.\n   *\n   * Equivalent to the `Numeric character reference state` in the HTML spec.\n   *\n   * @param str The string containing the entity (or a continuation of the entity).\n   * @param offset The current offset.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n\n\n  EntityDecoder.prototype.stateNumericStart = function (str, offset) {\n    if (offset >= str.length) {\n      return -1;\n    }\n\n    if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n      this.state = EntityDecoderState.NumericHex;\n      this.consumed += 1;\n      return this.stateNumericHex(str, offset + 1);\n    }\n\n    this.state = EntityDecoderState.NumericDecimal;\n    return this.stateNumericDecimal(str, offset);\n  };\n\n  EntityDecoder.prototype.addToNumericResult = function (str, start, end, base) {\n    if (start !== end) {\n      var digitCount = end - start;\n      this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);\n      this.consumed += digitCount;\n    }\n  };\n  /**\n   * Parses a hexadecimal numeric entity.\n   *\n   * Equivalent to the `Hexademical character reference state` in the HTML spec.\n   *\n   * @param str The string containing the entity (or a continuation of the entity).\n   * @param offset The current offset.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n\n\n  EntityDecoder.prototype.stateNumericHex = function (str, offset) {\n    var startIdx = offset;\n\n    while (offset < str.length) {\n      var char = str.charCodeAt(offset);\n\n      if (isNumber(char) || isHexadecimalCharacter(char)) {\n        offset += 1;\n      } else {\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return this.emitNumericEntity(char, 3);\n      }\n    }\n\n    this.addToNumericResult(str, startIdx, offset, 16);\n    return -1;\n  };\n  /**\n   * Parses a decimal numeric entity.\n   *\n   * Equivalent to the `Decimal character reference state` in the HTML spec.\n   *\n   * @param str The string containing the entity (or a continuation of the entity).\n   * @param offset The current offset.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n\n\n  EntityDecoder.prototype.stateNumericDecimal = function (str, offset) {\n    var startIdx = offset;\n\n    while (offset < str.length) {\n      var char = str.charCodeAt(offset);\n\n      if (isNumber(char)) {\n        offset += 1;\n      } else {\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return this.emitNumericEntity(char, 2);\n      }\n    }\n\n    this.addToNumericResult(str, startIdx, offset, 10);\n    return -1;\n  };\n  /**\n   * Validate and emit a numeric entity.\n   *\n   * Implements the logic from the `Hexademical character reference start\n   * state` and `Numeric character reference end state` in the HTML spec.\n   *\n   * @param lastCp The last code point of the entity. Used to see if the\n   *               entity was terminated with a semicolon.\n   * @param expectedLength The minimum number of characters that should be\n   *                       consumed. Used to validate that at least one digit\n   *                       was consumed.\n   * @returns The number of characters that were consumed.\n   */\n\n\n  EntityDecoder.prototype.emitNumericEntity = function (lastCp, expectedLength) {\n    var _a; // Ensure we consumed at least one digit.\n\n\n    if (this.consumed <= expectedLength) {\n      (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n      return 0;\n    } // Figure out if this is a legit end of the entity\n\n\n    if (lastCp === CharCodes.SEMI) {\n      this.consumed += 1;\n    } else if (this.decodeMode === DecodingMode.Strict) {\n      return 0;\n    }\n\n    this.emitCodePoint((0, decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);\n\n    if (this.errors) {\n      if (lastCp !== CharCodes.SEMI) {\n        this.errors.missingSemicolonAfterCharacterReference();\n      }\n\n      this.errors.validateNumericCharacterReference(this.result);\n    }\n\n    return this.consumed;\n  };\n  /**\n   * Parses a named entity.\n   *\n   * Equivalent to the `Named character reference state` in the HTML spec.\n   *\n   * @param str The string containing the entity (or a continuation of the entity).\n   * @param offset The current offset.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n\n\n  EntityDecoder.prototype.stateNamedEntity = function (str, offset) {\n    var decodeTree = this.decodeTree;\n    var current = decodeTree[this.treeIndex]; // The mask is the number of bytes of the value, including the current byte.\n\n    var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n\n    for (; offset < str.length; offset++, this.excess++) {\n      var char = str.charCodeAt(offset);\n      this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n\n      if (this.treeIndex < 0) {\n        return this.result === 0 || // If we are parsing an attribute\n        this.decodeMode === DecodingMode.Attribute && ( // We shouldn't have consumed any characters after the entity,\n        valueLength === 0 || // And there should be no invalid characters.\n        isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();\n      }\n\n      current = decodeTree[this.treeIndex];\n      valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14; // If the branch is a value, store it and continue\n\n      if (valueLength !== 0) {\n        // If the entity is terminated by a semicolon, we are done.\n        if (char === CharCodes.SEMI) {\n          return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n        } // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n\n\n        if (this.decodeMode !== DecodingMode.Strict) {\n          this.result = this.treeIndex;\n          this.consumed += this.excess;\n          this.excess = 0;\n        }\n      }\n    }\n\n    return -1;\n  };\n  /**\n   * Emit a named entity that was not terminated with a semicolon.\n   *\n   * @returns The number of characters consumed.\n   */\n\n\n  EntityDecoder.prototype.emitNotTerminatedNamedEntity = function () {\n    var _a;\n\n    var _b = this,\n        result = _b.result,\n        decodeTree = _b.decodeTree;\n\n    var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n    this.emitNamedEntityData(result, valueLength, this.consumed);\n    (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n    return this.consumed;\n  };\n  /**\n   * Emit a named entity.\n   *\n   * @param result The index of the entity in the decode tree.\n   * @param valueLength The number of bytes in the entity.\n   * @param consumed The number of characters consumed.\n   *\n   * @returns The number of characters consumed.\n   */\n\n\n  EntityDecoder.prototype.emitNamedEntityData = function (result, valueLength, consumed) {\n    var decodeTree = this.decodeTree;\n    this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);\n\n    if (valueLength === 3) {\n      // For multi-byte values, we need to emit the second byte.\n      this.emitCodePoint(decodeTree[result + 2], consumed);\n    }\n\n    return consumed;\n  };\n  /**\n   * Signal to the parser that the end of the input was reached.\n   *\n   * Remaining data will be emitted and relevant errors will be produced.\n   *\n   * @returns The number of characters consumed.\n   */\n\n\n  EntityDecoder.prototype.end = function () {\n    var _a;\n\n    switch (this.state) {\n      case EntityDecoderState.NamedEntity:\n        {\n          // Emit a named entity if we have one.\n          return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;\n        }\n      // Otherwise, emit a numeric entity if we have one.\n\n      case EntityDecoderState.NumericDecimal:\n        {\n          return this.emitNumericEntity(0, 2);\n        }\n\n      case EntityDecoderState.NumericHex:\n        {\n          return this.emitNumericEntity(0, 3);\n        }\n\n      case EntityDecoderState.NumericStart:\n        {\n          (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n          return 0;\n        }\n\n      case EntityDecoderState.EntityStart:\n        {\n          // Return 0 if we have no entity.\n          return 0;\n        }\n    }\n  };\n\n  return EntityDecoder;\n}();\n\nexports.EntityDecoder = EntityDecoder;\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */\n\nfunction getDecoder(decodeTree) {\n  var ret = \"\";\n  var decoder = new EntityDecoder(decodeTree, function (str) {\n    return ret += (0, decode_codepoint_js_1.fromCodePoint)(str);\n  });\n  return function decodeWithTrie(str, decodeMode) {\n    var lastIndex = 0;\n    var offset = 0;\n\n    while ((offset = str.indexOf(\"&\", offset)) >= 0) {\n      ret += str.slice(lastIndex, offset);\n      decoder.startEntity(decodeMode);\n      var len = decoder.write(str, // Skip the \"&\"\n      offset + 1);\n\n      if (len < 0) {\n        lastIndex = offset + decoder.end();\n        break;\n      }\n\n      lastIndex = offset + len; // If `len` is 0, skip the current `&` and continue.\n\n      offset = len === 0 ? lastIndex + 1 : lastIndex;\n    }\n\n    var result = ret + str.slice(lastIndex); // Make sure we don't keep a reference to the final string.\n\n    ret = \"\";\n    return result;\n  };\n}\n/**\n * Determines the branch of the current node that is taken given the current\n * character. This function is used to traverse the trie.\n *\n * @param decodeTree The trie.\n * @param current The current node.\n * @param nodeIdx The index right after the current node and its value.\n * @param char The current character.\n * @returns The index of the next node, or -1 if no branch is taken.\n */\n\n\nfunction determineBranch(decodeTree, current, nodeIdx, char) {\n  var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n  var jumpOffset = current & BinTrieFlags.JUMP_TABLE; // Case 1: Single branch encoded in jump offset\n\n  if (branchCount === 0) {\n    return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n  } // Case 2: Multiple branches encoded in jump table\n\n\n  if (jumpOffset) {\n    var value = char - jumpOffset;\n    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n  } // Case 3: Multiple branches encoded in dictionary\n  // Binary search for the character.\n\n\n  var lo = nodeIdx;\n  var hi = lo + branchCount - 1;\n\n  while (lo <= hi) {\n    var mid = lo + hi >>> 1;\n    var midVal = decodeTree[mid];\n\n    if (midVal < char) {\n      lo = mid + 1;\n    } else if (midVal > char) {\n      hi = mid - 1;\n    } else {\n      return decodeTree[mid + branchCount];\n    }\n  }\n\n  return -1;\n}\n\nexports.determineBranch = determineBranch;\nvar htmlDecoder = getDecoder(decode_data_html_js_1.default);\nvar xmlDecoder = getDecoder(decode_data_xml_js_1.default);\n/**\n * Decodes an HTML string.\n *\n * @param str The string to decode.\n * @param mode The decoding mode.\n * @returns The decoded string.\n */\n\nfunction decodeHTML(str, mode) {\n  if (mode === void 0) {\n    mode = DecodingMode.Legacy;\n  }\n\n  return htmlDecoder(str, mode);\n}\n\nexports.decodeHTML = decodeHTML;\n/**\n * Decodes an HTML string in an attribute.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\n\nfunction decodeHTMLAttribute(str) {\n  return htmlDecoder(str, DecodingMode.Attribute);\n}\n\nexports.decodeHTMLAttribute = decodeHTMLAttribute;\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\n\nfunction decodeHTMLStrict(str) {\n  return htmlDecoder(str, DecodingMode.Strict);\n}\n\nexports.decodeHTMLStrict = decodeHTMLStrict;\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\n\nfunction decodeXML(str) {\n  return xmlDecoder(str, DecodingMode.Strict);\n}\n\nexports.decodeXML = decodeXML;","map":{"version":3,"mappings":"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","names":["exports","decode_data_html_js_1","decode_data_xml_js_1","decode_codepoint_js_1","Object","enumerable","get","CharCodes","TO_LOWER_BIT","BinTrieFlags","isNumber","code","ZERO","NINE","isHexadecimalCharacter","UPPER_A","UPPER_F","LOWER_A","LOWER_F","isAsciiAlphaNumeric","UPPER_Z","LOWER_Z","isEntityInAttributeInvalidEnd","EQUALS","EntityDecoderState","DecodingMode","decodeTree","emitCodePoint","errors","EntityStart","Strict","EntityDecoder","decodeMode","state","result","treeIndex","excess","consumed","str","offset","charCodeAt","NUM","NumericStart","stateNumericStart","NamedEntity","stateNamedEntity","NumericDecimal","stateNumericDecimal","NumericHex","stateNumericHex","length","LOWER_X","start","end","base","digitCount","Math","pow","parseInt","substr","startIdx","char","addToNumericResult","emitNumericEntity","lastCp","expectedLength","_a","absenceOfDigitsInNumericCharacterReference","SEMI","missingSemicolonAfterCharacterReference","validateNumericCharacterReference","current","valueLength","VALUE_LENGTH","determineBranch","max","Attribute","emitNotTerminatedNamedEntity","emitNamedEntityData","getDecoder","ret","decoder","decodeWithTrie","lastIndex","indexOf","slice","startEntity","len","write","nodeIdx","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","value","lo","hi","mid","midVal","htmlDecoder","xmlDecoder","decodeHTML","mode","Legacy","decodeHTMLAttribute","decodeHTMLStrict","decodeXML"],"sources":["decode.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}