{"ast":null,"code":"var _jsxFileName = \"/app/src/Auth/AuthContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n\n  return useContext(AuthContext);\n};\n\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const AuthProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [userId, setUserId] = useState(null);\n\n  const login = async () => {\n    // Assuming you've handled the login logic here and it was successful...\n    // After login, re-fetch authentication status\n    await checkAuthStatus();\n    setIsAuthenticated(true); // You may move this inside checkAuthStatus based on the response\n  };\n\n  const logout = () => {\n    setIsAuthenticated(false);\n    setUserId(null);\n  };\n\n  const [isLoading, setIsLoading] = useState(true);\n  console.log(userId);\n  const value = {\n    isAuthenticated,\n    userId,\n    login,\n    logout,\n    isLoading\n  };\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        const response = await fetch('http://localhost:8070/api/check-auth-status', {\n          method: 'GET',\n          credentials: 'include'\n        });\n        const data = await response.json();\n        setIsAuthenticated(data.isAuthenticated);\n        setUserId(data.id);\n      } catch (error) {\n        console.error('Failed to check auth status:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 13\n  }, this);\n};\n\n_s2(AuthProvider, \"NrPeXIKvCRnuK+k7KYmALLpJbeI=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AuthContext","useAuth","AuthProvider","children","isAuthenticated","setIsAuthenticated","userId","setUserId","login","checkAuthStatus","logout","isLoading","setIsLoading","console","log","value","response","fetch","method","credentials","data","json","id","error"],"sources":["/app/src/Auth/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\n    const AuthContext = createContext();\n\n    export const useAuth = () => {\n        return useContext(AuthContext);\n    };\n\n    export const AuthProvider = ({ children }) => {\n        const [isAuthenticated, setIsAuthenticated] = useState(false);\n        const [userId, setUserId] = useState(null);\n        const login = async () => {\n    // Assuming you've handled the login logic here and it was successful...\n\n    // After login, re-fetch authentication status\n    await checkAuthStatus();\n    setIsAuthenticated(true); // You may move this inside checkAuthStatus based on the response\n};\n        const logout = () => {\n            setIsAuthenticated(false);\n            setUserId(null);\n        };\n        const [isLoading, setIsLoading] = useState(true);\n\n\n        console.log(userId)\n        const value = {\n            isAuthenticated,\n            userId,\n            login,\n            logout,\n            isLoading,\n        };\n\n    useEffect(() => {\n        const checkAuthStatus = async () => {\n            try {\n                const response = await fetch('http://localhost:8070/api/check-auth-status', {\n                    method: 'GET',\n                    credentials: 'include',\n                });\n                const data = await response.json();\n                setIsAuthenticated(data.isAuthenticated);\n                setUserId(data.id);\n            } catch (error) {\n                console.error('Failed to check auth status:', error);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        checkAuthStatus();\n    }, []);\n        return (\n            <AuthContext.Provider value={value}>\n                {children}\n            </AuthContext.Provider>\n        );\n    };\n"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,EAAqDC,SAArD,QAAsE,OAAtE;;AAEI,MAAMC,WAAW,gBAAGJ,aAAa,EAAjC;AAEA,OAAO,MAAMK,OAAO,GAAG,MAAM;EAAA;;EACzB,OAAOJ,UAAU,CAACG,WAAD,CAAjB;AACH,CAFM;;GAAMC,O;;AAIb,OAAO,MAAMC,YAAY,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC1C,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCP,QAAQ,CAAC,KAAD,CAAtD;EACA,MAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,IAAD,CAApC;;EACA,MAAMU,KAAK,GAAG,YAAY;IAC9B;IAEA;IACA,MAAMC,eAAe,EAArB;IACAJ,kBAAkB,CAAC,IAAD,CAAlB,CAL8B,CAKJ;EAC7B,CANO;;EAOA,MAAMK,MAAM,GAAG,MAAM;IACjBL,kBAAkB,CAAC,KAAD,CAAlB;IACAE,SAAS,CAAC,IAAD,CAAT;EACH,CAHD;;EAIA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,IAAD,CAA1C;EAGAe,OAAO,CAACC,GAAR,CAAYR,MAAZ;EACA,MAAMS,KAAK,GAAG;IACVX,eADU;IAEVE,MAFU;IAGVE,KAHU;IAIVE,MAJU;IAKVC;EALU,CAAd;EAQJZ,SAAS,CAAC,MAAM;IACZ,MAAMU,eAAe,GAAG,YAAY;MAChC,IAAI;QACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAAD,EAAgD;UACxEC,MAAM,EAAE,KADgE;UAExEC,WAAW,EAAE;QAF2D,CAAhD,CAA5B;QAIA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;QACAhB,kBAAkB,CAACe,IAAI,CAAChB,eAAN,CAAlB;QACAG,SAAS,CAACa,IAAI,CAACE,EAAN,CAAT;MACH,CARD,CAQE,OAAOC,KAAP,EAAc;QACZV,OAAO,CAACU,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;MACH,CAVD,SAUU;QACNX,YAAY,CAAC,KAAD,CAAZ;MACH;IACJ,CAdD;;IAgBAH,eAAe;EAClB,CAlBQ,EAkBN,EAlBM,CAAT;EAmBI,oBACI,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAEM,KAA7B;IAAA,UACKZ;EADL;IAAA;IAAA;IAAA;EAAA,QADJ;AAKH,CAlDM;;IAAMD,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}