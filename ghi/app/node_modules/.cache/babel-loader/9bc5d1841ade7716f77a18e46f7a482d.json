{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeXMLStrict = exports.decodeHTML5Strict = exports.decodeHTML4Strict = exports.decodeHTML5 = exports.decodeHTML4 = exports.decodeHTMLAttribute = exports.decodeHTMLStrict = exports.decodeHTML = exports.decodeXML = exports.DecodingMode = exports.EntityDecoder = exports.encodeHTML5 = exports.encodeHTML4 = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.escapeText = exports.escapeAttribute = exports.escapeUTF8 = exports.escape = exports.encodeXML = exports.encode = exports.decodeStrict = exports.decode = exports.EncodingMode = exports.EntityLevel = void 0;\n\nvar decode_js_1 = require(\"./decode.js\");\n\nvar encode_js_1 = require(\"./encode.js\");\n\nvar escape_js_1 = require(\"./escape.js\");\n/** The level of entities to support. */\n\n\nvar EntityLevel;\n\n(function (EntityLevel) {\n  /** Support only XML entities. */\n  EntityLevel[EntityLevel[\"XML\"] = 0] = \"XML\";\n  /** Support HTML entities, which are a superset of XML entities. */\n\n  EntityLevel[EntityLevel[\"HTML\"] = 1] = \"HTML\";\n})(EntityLevel = exports.EntityLevel || (exports.EntityLevel = {}));\n\nvar EncodingMode;\n\n(function (EncodingMode) {\n  /**\n   * The output is UTF-8 encoded. Only characters that need escaping within\n   * XML will be escaped.\n   */\n  EncodingMode[EncodingMode[\"UTF8\"] = 0] = \"UTF8\";\n  /**\n   * The output consists only of ASCII characters. Characters that need\n   * escaping within HTML, and characters that aren't ASCII characters will\n   * be escaped.\n   */\n\n  EncodingMode[EncodingMode[\"ASCII\"] = 1] = \"ASCII\";\n  /**\n   * Encode all characters that have an equivalent entity, as well as all\n   * characters that are not ASCII characters.\n   */\n\n  EncodingMode[EncodingMode[\"Extensive\"] = 2] = \"Extensive\";\n  /**\n   * Encode all characters that have to be escaped in HTML attributes,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   */\n\n  EncodingMode[EncodingMode[\"Attribute\"] = 3] = \"Attribute\";\n  /**\n   * Encode all characters that have to be escaped in HTML text,\n   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n   */\n\n  EncodingMode[EncodingMode[\"Text\"] = 4] = \"Text\";\n})(EncodingMode = exports.EncodingMode || (exports.EncodingMode = {}));\n/**\n * Decodes a string with entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n */\n\n\nfunction decode(data, options) {\n  if (options === void 0) {\n    options = EntityLevel.XML;\n  }\n\n  var level = typeof options === \"number\" ? options : options.level;\n\n  if (level === EntityLevel.HTML) {\n    var mode = typeof options === \"object\" ? options.mode : undefined;\n    return (0, decode_js_1.decodeHTML)(data, mode);\n  }\n\n  return (0, decode_js_1.decodeXML)(data);\n}\n\nexports.decode = decode;\n/**\n * Decodes a string with entities. Does not allow missing trailing semicolons for entities.\n *\n * @param data String to decode.\n * @param options Decoding options.\n * @deprecated Use `decode` with the `mode` set to `Strict`.\n */\n\nfunction decodeStrict(data, options) {\n  var _a;\n\n  if (options === void 0) {\n    options = EntityLevel.XML;\n  }\n\n  var opts = typeof options === \"number\" ? {\n    level: options\n  } : options;\n  (_a = opts.mode) !== null && _a !== void 0 ? _a : opts.mode = decode_js_1.DecodingMode.Strict;\n  return decode(data, opts);\n}\n\nexports.decodeStrict = decodeStrict;\n/**\n * Encodes a string with entities.\n *\n * @param data String to encode.\n * @param options Encoding options.\n */\n\nfunction encode(data, options) {\n  if (options === void 0) {\n    options = EntityLevel.XML;\n  }\n\n  var opts = typeof options === \"number\" ? {\n    level: options\n  } : options; // Mode `UTF8` just escapes XML entities\n\n  if (opts.mode === EncodingMode.UTF8) return (0, escape_js_1.escapeUTF8)(data);\n  if (opts.mode === EncodingMode.Attribute) return (0, escape_js_1.escapeAttribute)(data);\n  if (opts.mode === EncodingMode.Text) return (0, escape_js_1.escapeText)(data);\n\n  if (opts.level === EntityLevel.HTML) {\n    if (opts.mode === EncodingMode.ASCII) {\n      return (0, encode_js_1.encodeNonAsciiHTML)(data);\n    }\n\n    return (0, encode_js_1.encodeHTML)(data);\n  } // ASCII and Extensive are equivalent\n\n\n  return (0, escape_js_1.encodeXML)(data);\n}\n\nexports.encode = encode;\n\nvar escape_js_2 = require(\"./escape.js\");\n\nObject.defineProperty(exports, \"encodeXML\", {\n  enumerable: true,\n  get: function () {\n    return escape_js_2.encodeXML;\n  }\n});\nObject.defineProperty(exports, \"escape\", {\n  enumerable: true,\n  get: function () {\n    return escape_js_2.escape;\n  }\n});\nObject.defineProperty(exports, \"escapeUTF8\", {\n  enumerable: true,\n  get: function () {\n    return escape_js_2.escapeUTF8;\n  }\n});\nObject.defineProperty(exports, \"escapeAttribute\", {\n  enumerable: true,\n  get: function () {\n    return escape_js_2.escapeAttribute;\n  }\n});\nObject.defineProperty(exports, \"escapeText\", {\n  enumerable: true,\n  get: function () {\n    return escape_js_2.escapeText;\n  }\n});\n\nvar encode_js_2 = require(\"./encode.js\");\n\nObject.defineProperty(exports, \"encodeHTML\", {\n  enumerable: true,\n  get: function () {\n    return encode_js_2.encodeHTML;\n  }\n});\nObject.defineProperty(exports, \"encodeNonAsciiHTML\", {\n  enumerable: true,\n  get: function () {\n    return encode_js_2.encodeNonAsciiHTML;\n  }\n}); // Legacy aliases (deprecated)\n\nObject.defineProperty(exports, \"encodeHTML4\", {\n  enumerable: true,\n  get: function () {\n    return encode_js_2.encodeHTML;\n  }\n});\nObject.defineProperty(exports, \"encodeHTML5\", {\n  enumerable: true,\n  get: function () {\n    return encode_js_2.encodeHTML;\n  }\n});\n\nvar decode_js_2 = require(\"./decode.js\");\n\nObject.defineProperty(exports, \"EntityDecoder\", {\n  enumerable: true,\n  get: function () {\n    return decode_js_2.EntityDecoder;\n  }\n});\nObject.defineProperty(exports, \"DecodingMode\", {\n  enumerable: true,\n  get: function () {\n    return decode_js_2.DecodingMode;\n  }\n});\nObject.defineProperty(exports, \"decodeXML\", {\n  enumerable: true,\n  get: function () {\n    return decode_js_2.decodeXML;\n  }\n});\nObject.defineProperty(exports, \"decodeHTML\", {\n  enumerable: true,\n  get: function () {\n    return decode_js_2.decodeHTML;\n  }\n});\nObject.defineProperty(exports, \"decodeHTMLStrict\", {\n  enumerable: true,\n  get: function () {\n    return decode_js_2.decodeHTMLStrict;\n  }\n});\nObject.defineProperty(exports, \"decodeHTMLAttribute\", {\n  enumerable: true,\n  get: function () {\n    return decode_js_2.decodeHTMLAttribute;\n  }\n}); // Legacy aliases (deprecated)\n\nObject.defineProperty(exports, \"decodeHTML4\", {\n  enumerable: true,\n  get: function () {\n    return decode_js_2.decodeHTML;\n  }\n});\nObject.defineProperty(exports, \"decodeHTML5\", {\n  enumerable: true,\n  get: function () {\n    return decode_js_2.decodeHTML;\n  }\n});\nObject.defineProperty(exports, \"decodeHTML4Strict\", {\n  enumerable: true,\n  get: function () {\n    return decode_js_2.decodeHTMLStrict;\n  }\n});\nObject.defineProperty(exports, \"decodeHTML5Strict\", {\n  enumerable: true,\n  get: function () {\n    return decode_js_2.decodeHTMLStrict;\n  }\n});\nObject.defineProperty(exports, \"decodeXMLStrict\", {\n  enumerable: true,\n  get: function () {\n    return decode_js_2.decodeXML;\n  }\n});","map":{"version":3,"mappings":"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","names":["EntityLevel","exports","EncodingMode","decode","data","options","XML","level","HTML","mode","undefined","decodeStrict","opts","_a","decode_js_1","Strict","encode","UTF8","Attribute","Text","ASCII","Object","enumerable","get"],"sources":["index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}